#!/usr/bin/env python

__usage__ = "condor-naive_bayes_timeseries [--options] gpsstart gpsstop chanlist.txt"
__description__ = """\
generate a NaiveBayes classifier based on the channels in chanlist.txt and compute an assoicated timeseries within [gpsstart, gpsstop]. \
We assume chanlist.txt is an ASCII file with each line containing a channel name and its sample rate, corresponding to the output format of FrChannels"""
__author__ = "Reed Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import os
import glob

import subprocess as sp

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from optparse import OptionParser

### non-standard libraries
from naivebayes import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__description__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('', '--start', default=-np.infty, type='float')
parser.add_option('', '--stop', default=+np.infty, type='float')

parser.add_option('', '--srate', default=64, type='float',
    help='sample rate for things like p-value estimates, specified in Hz. \
DEFAULT=64')
parser.add_option('', '--window', default=1000, type='float',
    help='the window used for rate estimates (gps+/-opts.window), specified in sec. \
DEFAUL=1000')

parser.add_option('', '--exclude', default=[], type='string', action='append',
    help='an exact match for KW channel names that you want excluded')

parser.add_option('', '--kwsignif-thr', default=[15.0], type='float', action='append',
    help='the kwsignif threshold over which we maximize when computing pointy-Poisson statistic. \
DEFAULT=[15.0]')

parser.add_option('', '--skip-kwtrg-generation', default=False, action='store_true')
parser.add_option('', '--kwstride', default=32, type='int', 
    help='DEFAULT=32')
parser.add_option('', '--frametype', default='L1_R', type='string', 
    help='used for KW trigger generation and naming convention. \
DEFAULT=L1_R')

parser.add_option('', '--plot', default=False, action='store_true',
    help='generate plots in addition to the npz files')
parser.add_option('', '--plot-start-dur', nargs=2, default=[], type='float', action='append',
    help='generate zoomed plots using this window. Can be repeated. \
DEFAULT=[]')

parser.add_option('', '--reference-gps', default=None, type='float')
parser.add_option('', '--frac-of-dur', default=0.01, type='float',
    help='the fraction of the trigger duration used as the minimum dt in the pointy statistic. \
DEFAULT=0.01')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

parser.add_option('', '--do-not-save-singlechan', default=False, action='store_true',
    help='do not save npy files for individual channels. Could help speed up run-time')
parser.add_option('', '--do-not-plot-singlechan', default=False, action='store_true',
    help='do not plot results for individual channels. Could help speed up run-time')

opts, args = parser.parse_args()
assert len(args)==3, "please supply exactly 3 input arguments\n%s"%__usage__
gpsstart, gpsstop = [float(_) for _ in args[:2]]
opts.start = np.max(opts.start, gpsstart)
opts.stop = np.min(opts.stop, gpsstop)
dur = opts.stop - opts.start

chanlist_path = args[2]

opts.plot_start_dur.insert(0, (start, dur))

opts.output_dir = os.path.abspath(opts.output_dir)
if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    filetag = "_"+opts.tag
else:
    filetag = ""

observatory = opts.frametype[0] ### FIXME: extraction of observatory from frame type may be fragile...

cwd = os.getcwd()

opts.kwsignif_thr.sort(reverse=True) ### order from largest to smallest

#-------------------------------------------------

if opts.verbose:
    print( "reading channels from : "+chanlist_path )
chanlist = utils.chanlist2chans(chanlist_path)

#-------------------------------------------------

###---------- TRIGGER GENERATION
if not opts.skip_kwtrg_generation:
    ### compute KW triggers for these channels
    kwconfig_path = "%s/KW%s.cnf"%(opts.output_dir, filetag)
    if opts.verbose:
        print( "writing : "+kwconfig_path )
    with open(kwconfig_path, 'w') as obj:
        obj.write(utils.chanlist2KWconfig( chanlist, observatory, tag=opts.tag, kwstride=opts.kwstride))

    ### go grab data
    inlist_path = "%s/frames%s.txt"%(opts.output_dir, filetag)
    if opts.verbose:
        print( "writing : "+inlist_path )
    with open(inlist_path, 'w') as obj:
        obj.write('\n'.join(utils.seg2inlist(gpsstart-2*opts.kwstride, gpsstop+2*opts.kwstride, opts.frametype, observatory, verbose=opts.verbose)))

    ### launch KW trigger generationu
    if opts.verbose:
        print( "runing KW trigger generation" )
    utils.genkwtrgs(kwconfig_path, inlist_path, opts.frametype, directory=opts.output_dir, verbose=opts.verbose)

#---

print "\nWARNING: we do NOT window triggers by any segments. What was produced is what we get. This many need to be changed in the future, but for now IT IS THE USER'S RESPONSIBILITY TO FEED IN APPROPRIATE gpsstart gpsstop TIMES!"

#---

### read in triggers
if opts.verbose:
    print( "reading in triggers" )

### NOTE: this may not be the most memory-efficient storage...
trgs = utils.paths2trgs(
    glob.glob("%s/%s-KW_%s_TRIGGERS-*/%s-KW_%s_TRIGGERS-*-%d.trg"%(opts.output_dir, observatory, opts.tag, observatory, opts.tag, opts.kwstride),
    opts.kwsignif_thr,
    exclude=opts.exclude,
    start=gpsstart,
    stop=gpsstop,
    verbose=opts.verbose,
)

#-------------------------------------------------

###----------- naive_bayes ESTIMATION
if opts.verbose:
    print( "" )
gps = np.arange(opts.start, opts.stop, 1./opts.srate), ### only analyze the subset specified in comand line
nbys = utils.trgs2timeseries(
    gps,
    trgs,
    opts.window,
    opts.kwsignif_thr,
    reference_gps=opts.reference_gps,
    verbose=opts.verbose,
    plot_start_dur=opts.plot_start_dur if opts.plot and (not opts.do_not_plot_singlechan) else [],
    save=not opts.do_not_save_singlechan,
    directory=opts.output_dir,
    tag=filetag,
)

if opts.verbose:
    print( "saving naive bayes ranking statistic" )

path = "%s/naivebayes%s-%d-%d.npy"%(opts.output_dir, filetag, start, dur)
if opts.verbose:
    print( "    "+path )
np.save(path, nbays)

# plot summary thing
if opts.plot:
    plotting_index = max(1, int(len(nbys)/10000))
    if opts.reference_gps!=None:
        tref = int(opts.reference_gps)
    else:
        tref = int(start)

    fig = plt.figure()
    ax = fig.gca()

    ax.plot((gps-tref)[::plotting_index], nbays[::plotting_index])

    ax.set_xlabel( '$t-%d$'%tref )
    ax.set_ylabel( '$\sum_i \log_{10} p_i$' )
    ax.grid(True, which='both')
    ax.set_title('Naive Bayes Joint Statistic')

    if opts.reference_gps!=None:
        ax.plot(ax.get_xlim(), [np.interp(tref, gps, nbays)]*2, 'k--')
        ax.plot([opts.reference_gps-tref]*2, ax.get_ylim(), 'k--')

    for start, dur in opts.plot_start_dur:
        ax.set_xlim(xmin=start-tref, xmax=start+dur-tref)
        path = "%s/naivebayes%s-%d-%d.png"%(opts.output_dir, filetag, start, dur)
        if opts.verbose:
            print( "    "+path )
        fig.savefig(path)
    plt.close(fig)
